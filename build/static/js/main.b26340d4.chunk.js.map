{"version":3,"sources":["router/index.ts","utils/rules.ts","components/LoginForm.tsx","pages/Login.tsx","pages/Event.tsx","store/reducers/auth/types.ts","hooks/useTypedSelector.ts","components/AppRouter.tsx","components/Navbar.jsx","App.tsx","store/reducers/auth/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["RoutesNames","rules","message","required","LoginForm","Item","label","name","type","htmlType","Login","justify","align","className","Event","AuthActionsEnum","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","useTypedSelector","useSelector","AppRouter","state","auth","isAuth","map","to","Navbar","router","useHistory","Header","style","color","theme","mode","selectable","onClick","console","log","push","App","Content","Footer","initialState","reducers","action","SET_AUTH","payload","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"wKAUYA,E,sECVCC,EACC,SAACC,GAAD,MAAsB,CAC5BC,UAAU,EACVD,Y,OC6BOE,EA5BO,WAClB,OACI,eAAC,IAAD,WACI,cAAC,IAAKC,KAAN,CACIC,MAAM,WACNC,KAAK,WACLN,MAAO,CAACA,EAAe,gCAH3B,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKI,KAAN,CACIC,MAAM,WACNC,KAAK,WACLN,MAAO,CAACA,EAAe,gCAH3B,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKI,KAAN,UACI,cAAC,IAAD,CAAQG,KAAK,UAAUC,SAAS,SAAhC,0BCVDC,EAVG,WACd,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,QAAQ,SAASC,MAAM,SAASC,UAAU,OAA/C,SACI,cAAC,EAAD,SCADC,EANG,WACd,OACI,0C,SJMId,K,eAAAA,E,WAAAA,M,KAKL,IKXKe,ELWCC,EAAyB,CAClC,CACIC,KAAMjB,EAAYkB,MAClBC,OAAO,EACPC,UAAWV,IAINW,EAA0B,CACnC,CACIJ,KAAMjB,EAAYsB,MAClBH,OAAO,EACPC,UAAWN,I,QMxBNS,EAAoDC,ICiClDC,EA/BO,WAElB,OADmBF,GAAiB,SAAAG,GAAK,OAAIA,EAAMC,QAA3CC,OAIA,eAAC,IAAD,WACKP,EAAcQ,KAAI,YAAiC,IAA9BZ,EAA6B,EAA7BA,KAAME,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC/B,OAAO,cAAC,IAAD,CACHH,KAAMA,EACNE,MAAOA,EACPC,UAAWA,GACNH,MAGb,cAAC,IAAD,CAAUa,GAAI9B,EAAYsB,WAG9B,eAAC,IAAD,WACKN,EAAaa,KAAI,YAAiC,IAA9BZ,EAA6B,EAA7BA,KAAME,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC9B,OAAO,cAAC,IAAD,CACHH,KAAMA,EACNE,MAAOA,EACPC,UAAWA,GACNH,MAGb,cAAC,IAAD,CAAUa,GAAI9B,EAAYkB,Y,SCO3Ba,EAhCI,WACf,IAAMC,EAASC,cACPL,EAAWL,GAAiB,SAAAG,GAAK,OAAIA,EAAMC,QAA3CC,OACR,OACI,cAAC,IAAOM,OAAR,UACI,cAAC,IAAD,CAAKvB,QAAQ,MAAb,SAEQiB,EACI,qCACI,qBAAKO,MAAO,CAAEC,MAAO,SAArB,oBACA,cAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAjD,SACI,cAAC,IAAKlC,KAAN,CACImC,QAAS,WAAQC,QAAQC,IAAI,WADjC,mBAEQ,UAMhB,cAAC,IAAD,CAAML,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAjD,SACI,cAAC,IAAKlC,KAAN,CACImC,QAASR,EAAOW,KAAK3C,EAAYkB,OADrC,kBAEQ,YCRrB0B,G,OAdC,WACd,OACE,8BACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAOC,QAAR,UACE,cAAC,EAAD,MAEF,cAAC,IAAOC,OAAR,W,2CJVI/B,K,qBAAAA,M,KKFZ,IAAMgC,EAA0B,CAC5BnB,QAAQ,GCEZ,IAAMoB,EAAW,CACbrB,KDKW,WAA2E,IAAtDD,EAAqD,uDAA7CqB,EAAcE,EAA+B,uCAErF,OAAQA,EAAOzC,OACNO,EAAgBmC,SACV,2BAAKxB,GAAZ,IAAmBE,OAAQqB,EAAOE,UAE3BzB,ICRJsB,ICLTI,EAAcC,YAAgBL,GAEvBM,EAAQC,YAAYH,EAAaI,YAAgBC,MCC9DC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.b26340d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Login from '../pages/Login';\r\nimport Event from '../pages/Event';\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RoutesNames {\r\n    LOGIN = '/login',\r\n    EVENT = '/'\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {\r\n        path: RoutesNames.LOGIN,\r\n        exact: true,\r\n        component: Login\r\n    }\r\n];\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {\r\n        path: RoutesNames.EVENT,\r\n        exact: true,\r\n        component: Event\r\n    }\r\n];","export const rules = {\r\n    required: (message: string) => ({\r\n        required: true,\r\n        message\r\n    })\r\n}","import { FC } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { rules } from '../utils/rules'\r\n\r\nconst LoginForm: FC = () => {\r\n    return (\r\n        <Form>\r\n            <Form.Item\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                rules={[rules.required('Please input your username!')]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[rules.required('Please input your password!')]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import { FC } from 'react';\r\nimport { Layout, Row } from 'antd';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nconst Login: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\r\n                <LoginForm />\r\n            </Row>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default Login;","import { FC } from 'react';\r\n\r\nconst Event: FC = () => {\r\n    return (\r\n        <div>Event</div>\r\n    );\r\n}\r\n\r\nexport default Event;","export interface AuthState {\r\n    isAuth: boolean;\r\n}\r\n\r\nexport enum AuthActionsEnum {\r\n    SET_AUTH = \"SET_AUTH\"\r\n}\r\n\r\ninterface SetAuthAction {\r\n    type: AuthActionsEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction = SetAuthAction;","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import { FC } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { privateRoutes, publicRoutes, RoutesNames } from '../router';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nconst AppRouter: FC = () => {\r\n    const { isAuth } = useTypedSelector(state => state.auth);\r\n    return (\r\n        isAuth\r\n            ?\r\n            <Switch>\r\n                {privateRoutes.map(({ path, exact, component }) => {\r\n                    return <Route\r\n                        path={path}\r\n                        exact={exact}\r\n                        component={component}\r\n                        key={path}\r\n                    />\r\n                })}\r\n                <Redirect to={RoutesNames.EVENT} />\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(({ path, exact, component }) => {\r\n                    return <Route\r\n                        path={path}\r\n                        exact={exact}\r\n                        component={component}\r\n                        key={path}\r\n                    />\r\n                })}\r\n                <Redirect to={RoutesNames.LOGIN} />\r\n            </Switch>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import { FC } from 'react';\r\nimport { Layout, Row, Menu } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RoutesNames } from '../router';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory();\r\n    const { isAuth } = useTypedSelector(state => state.auth);\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify=\"end\">\r\n                {\r\n                    isAuth ?\r\n                        <>\r\n                            <div style={{ color: 'white' }}>stepGT</div>\r\n                            <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                                <Menu.Item\r\n                                    onClick={() => { console.log('Logout') }}\r\n                                    key=\"1\">\r\n                                    Logout\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </>\r\n                        :\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                            <Menu.Item\r\n                                onClick={router.push(RoutesNames.LOGIN)}\r\n                                key=\"1\">\r\n                                Login\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import { FC } from 'react';\r\nimport AppRouter from './components/AppRouter';\r\nimport Navbar from './components/Navbar';\r\nimport { Layout } from 'antd';\r\nimport './App.css';\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <Navbar />\r\n        <Layout.Content>\r\n          <AppRouter />\r\n        </Layout.Content>\r\n        <Layout.Footer></Layout.Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { AuthAction, AuthActionsEnum, AuthState } from \"./types\";\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false\r\n}\r\n/**\r\n * \r\n * @param state Current state\r\n * @param action \r\n * @returns \r\n */\r\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    //\r\n    switch (action.type) {\r\n        case AuthActionsEnum.SET_AUTH:\r\n            return { ...state, isAuth: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}","import auth from './auth';\r\n\r\n/**\r\n * \r\n */\r\nconst reducers = {\r\n    auth\r\n};\r\n\r\nexport default reducers;","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type ApplyDispatch = typeof store.dispatch;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}